#!/usr/bin/env bats

bats_require_minimum_version 1.5.0
load wvtest.sh

setup() {
    # Don't pollute current dir
    cd "$BATS_TEST_TMPDIR"
}

@test "Invoke with no script" {
    run -0 novaboot -t '' < /dev/null
}

@test "Invoke as script" {
    create_dummy
    run -0 ./script --gen-only
}

@test "Invoke as script with absolute path" {
    create_dummy
    $PWD/script --gen-only
}

@test "Pulsar root" {
    create_dummy
    run -0 ./script --gen-only --pulsar --pulsar-root=ASDF
    grep "root ASDF" config-novaboot
}

@test "Pulsar supports chld" {
    create_script <<EOF
chld grub
EOF
    run -0 ./script --gen-only --pulsar
    grep "chld grub" config-novaboot
}

@test "GRUB2 with default BOOT_METHOD=multiboot" {
    create_script <<EOF
load kernel
load ramdisk
EOF
    run -0 ./script --gen-only --grub2
    git diff --no-index --color - boot/grub/grub.cfg <<EOF
menuentry script {
  multiboot kernel 
  module ramdisk ramdisk
}
EOF
}

@test "GRUB2 with BOOT_METHOD=linux" {
    create_script <<EOF
BOOT_METHOD=linux
load kernel
load ramdisk
EOF
    run -0 ./script --gen-only --grub2
    git diff --no-index --color - boot/grub/grub.cfg <<EOF
menuentry script {
  linux kernel 
  initrd ramdisk
}
EOF
}

@test "Configuration files" {
    create_dummy
    echo '1;' > .novaboot
    run -0 --separate-stderr ./script --gen-only
    grep "novaboot: Read $PWD/.novaboot" <<<$stderr
}

@test "Configuration files in symlinked directories" {
    mkdir config
    echo '1;' > config/.novaboot
    mkdir script
    ( cd script; create_dummy )
    ln -s ../script config
    run -0 --separate-stderr ./config/script/script --gen-only
    grep "novaboot: Read $PWD/config/.novaboot" <<<$stderr
}

@test "Builddir configuration variable" {
    mkdir -p build
    cat > .novaboot <<'EOF'
$builddir="build";
1;
EOF
    create_script <<'EOF'
load file < echo Hello
EOF
    run -0 ./script --gen-only
    test -f build/file
}

@test "Configuration directory" {
    mkdir -p dir
    echo '$test_a = 1;' > dir/a
    echo '$test_c = 2;' > dir/c
    echo '$test_c = 1;' > dir/b	# Overriden by the 'c' file
    echo '$test_ign=1;' > dir/b.txt	# Ignored
    NOVABOOT_CONFIG_DIR=./dir novaboot --dump-config > config
    grep '\$test' config > test
    diff -u - test <<'EOF'
$test_a = 1;
$test_c = 2;
EOF
}

@test "Fail with unknown target" {
    create_dummy
    run ! ./script --gen-only -t non-existing-target
}

@test "BUILDDIR variable" {
    mkdir -p build
    create_script <<'EOF'
BUILDDIR=build
load file < echo Hello
EOF
    run -0 ./script --gen-only
    test -f build/file
}

@test "Hypervisor configuration variable" {
    create_dummy
    echo '$hypervisor="HYP";' > .novaboot
    run -0 ./script --gen-only --pulsar
    grep "exec HYP" config-novaboot
}

@test "ISO image generation" {
    create_dummy
    run -0 ./script --iso --gen-only
}

@test "Recursive target definition" {
    create_dummy
    cat > .novaboot <<EOF
%targets = (
    't1' => '--reset-cmd="echo MyResetCmd"',
    't2' => '--target t1',
);
EOF
    run -0 ./script --target=t2
    [[ $output =~ MyResetCmd ]]
}

@test "Wrong target definition" {
    create_dummy
    cat > .novaboot <<EOF
%targets = ('t1' => '--nonsense');
EOF
    run ! ./script --target=t1
    [[ $output =~ "Error in target definition" ]]
}

@test "Different ways of specifying target" {
    cat > .novaboot <<'EOF'
%targets = ('t1' => '--remote-cmd="echo Target1 > t"',
            't2' => '--remote-cmd="echo Target2 > t"',
            't3' => '--remote-cmd="echo Target3 > t"');
$default_target = 't1';
EOF
    run -0 novaboot /dev/null
    test "$(cat t)" = Target1
    NOVABOOT_TARGET=t2 novaboot /dev/null
    test "$(cat t)" = Target2
    NOVABOOT_TARGET=t2 novaboot --target t3 /dev/null
    test "$(cat t)" = Target3
}

@test "--iprelay-cmd" {
    run -0 novaboot --iprelay-cmd="$(which echo) -e '<iprelayd: connected>\xFF\xFA\x2C\x97\xDF\xFF\xF0 \xFF\xFA\x2C\x97\xFF\xFF\xF0'" --on
}

@test "Killing of --remote-cmd when it ignores SIGHUP" {
    tee script <<'EOF'
$SIG{HUP}='IGNORE';
open(FH, ">", "pid") or die;
print FH "$$";
close FH;
print "ready pid=$$\n";
print "exit\n";
sleep;
EOF
    run -0 novaboot --remote-cmd='perl script' --remote-expect=ready --exiton=exit /dev/null
    ! test -d /proc/$(cat pid)
    coproc novaboot --remote-cmd='perl script' --remote-expect=ready /dev/null
    sed -e '/ready/q0' <&${COPROC[0]}
    kill $COPROC_PID
    ! wait $COPROC_PID # Signal termination is considered a failure
    ! test -d /proc/$(cat pid)
}

@test "Correct invocation path" {
    mkdir dir
    tee dir/.novaboot <<<'print "Config OK\n";'
    (
        cd dir
        run -0 novaboot /dev/null
        [[ $output =~ "Config OK" ]]
    )
    tee dir/Makefile <<EOF
all:
	novaboot /dev/null
EOF
    run -0 make -C dir
    [[ $output =~ "Config OK" ]]
}

@test ""INTERACTION variable"" {
    run -0 novaboot --remote-cmd=cat <<<INTERACTION=0
}

@test "Do not accept directories" {
    mkdir -p tftproot
    run ! novaboot --server=tftproot <<<"load $PWD"
}

@test "Accept /dev/null file" {
    mkdir -p tftproot
    run -0 novaboot --server=tftproot <<<"load /dev/null"
}
