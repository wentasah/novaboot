#!/usr/bin/env bats

bats_require_minimum_version 1.5.0
load wvtest.sh

setup_file() {
    export NBT_HOME=$(getent passwd novaboot-test|cut -d: -f6)
    export SHELLRC="$NBT_HOME/.novaboot-shell"
    export TFTPROOT="$NBT_HOME/tftproot"
    export AUTH="$NBT_HOME/.ssh/authorized_keys"

    ## Create and check ssh keys needed for following tests
    # Start our custom ssh-agent to not mess up with the user's agent
    eval "$(ssh-agent)"
    test -n "$SSH_AUTH_SOCK" || exit 1
    if [ ! -f id_rsa ]; then
        ssh-keygen -t rsa -C "generated by $0" -N '' -f ./id_rsa
    fi
    export ID_RSA=$(realpath ./id_rsa)
    ssh-add ./id_rsa
}

teardown_file() {
    if [[ $SSH_AGENT_PID ]]; then
        ssh-agent -k
    fi
}

setup() {
    if [[ -z $NBT_HOME ]]; then
        skip "novaboot-test user does not exist"
    fi
    if [ -n "$DEB_HOST_ARCH" ]; then
        skip "Server tests in Debian package build cannot pass"
    fi
    cd "$BATS_TEST_TMPDIR"
}

sudo_() { sudo -u novaboot-test "$@"; }

@test "Setup SSH server's admin key" {
    sudo_ mkdir -p $(dirname "$AUTH")
    sudo_ chmod 700 $(dirname "$AUTH")
    sudo_ tee "$AUTH" <<<"command=\"user test admin\" $(cat "$ID_RSA".pub)"
    # Check that we can really log in
    ssh novaboot-test@localhost help
}

@test "Novaboot --ssh option (connect, rsync, reset)" {
    sudo_ rm -rf "$TFTPROOT"
    TS=$(date --rfc-3339=ns)
    sudo_ tee "$SHELLRC" <<EOF
console_cmd=cat
reset_cmd="echo $TS > reset.stamp"
target_config=""
EOF
    date > file
    novaboot --ssh novaboot-test@localhost <<EOF
copy file
EOF
    # Check that file was copied to tftproot
    diff -u file <(sudo_ cat $TFTPROOT/file)
    # Check that reset command was executed
    test "$TS" = "$(sudo_ cat "$NBT_HOME/reset.stamp")"
}

@test "Novaboot --ssh remote config" {
    sudo_ rm -rf "$TFTPROOT"
    sudo_ tee "$SHELLRC" <<EOF
console_cmd=cat
reset_cmd=true
target_config="\
--prefix=/prefix
--grub2
"
EOF
    date > file
    novaboot --ssh novaboot-test@localhost <<EOF
load file
EOF
    diff -u file <(sudo_ cat "$TFTPROOT/file")
    sudo_ grep /prefix/file "$TFTPROOT/boot/grub/grub.cfg"
}

@test "Novaboot --ssh remote config fails on non-safe options" {
    sudo_ tee "$SHELLRC" <<EOF
console_cmd=cat
reset_cmd=true
target_config="\
--prefix=/prefix
--make
"
EOF
    run ! --separate-stderr novaboot --ssh novaboot-test@localhost <<<"load file < date"
    echo "$stderr" | grep -q -F 'Unknown option: make'
    echo "$stderr" | grep -q -F 'Error processing configuration from the server'
}

@test "Novaboot --ssh remote config fails on unknown arguments" {
    sudo_ tee "$SHELLRC" <<EOF
console_cmd=cat
reset_cmd=true
target_config="\
--prefix=/prefix
blablabla
"
EOF
    ! novaboot --ssh novaboot-test@localhost <<<"load file < date"
    novaboot --ssh novaboot-test@localhost <<<"load file < date" 2>&1 >/dev/null |\
        grep -F "Unsuported configuration received from the server: blablabla"
}

@test "add-key subcommand" {
    ssh-keygen -t ed25519 -N '' -f key
    ! sudo_ grep new_user "$AUTH"
    ssh novaboot-test@localhost add-key new_user < key.pub
    sudo_ grep -F "user new_user" "$AUTH"
}

@test "add-key user must not contain spaces" {
    sudo_ cat "$AUTH" > auth
    ! ssh novaboot-test@localhost add-key "new user" < /dev/null
    diff -u <(sudo_ cat "$AUTH") auth
}

@test "add-key requires username" {
    sudo_ cat "$AUTH" > auth
    ! ssh novaboot-test@localhost add-key < /dev/null
    diff -u <(sudo_ cat "$AUTH") auth
}

@test "Suggest using ssh -t for shell" {
    run -0 ssh novaboot-test@localhost shell < /dev/null
    grep -e 'ssh -t' <<< $output
    run -0 ssh -tt novaboot-test@localhost shell <<<exit
    ! grep -e 'ssh -t' <<< $output
}
