#!/usr/bin/env bats

bats_require_minimum_version 1.5.0
load wvtest.sh

setup() {
    export WV_BASE_DIR
    export NOVABOOT_SHELL_CONFIG="$WV_BASE_DIR/.novaboot-shell"
    cat <<EOF > $NOVABOOT_SHELL_CONFIG
console_cmd="echo 'Hello console'; while :; do sleep 0.1; date; done"
reset_cmd="touch reset_done"
target_config='--prefix=asdf'
EOF
    cd "$BATS_TEST_TMPDIR"
}
# Run server synchronously
function run_server() {
    SSH_ORIGINAL_COMMAND="$*" SSH_CONNECTION="127.0.0.1 1234 127.0.0.1 22" $exec $WV_BASE_DIR/../server/novaboot-shell -c "${account:-user} ${username:-test} ${admin:+admin}"
}

# Exec server (for use with coproc - then the server can be easily killed)
function exec_server() {
    local exec
    exec=exec
    run_server "$@"
}

@test "Help subcommand" {
    run -0 run_server help
    grep 'Target commands:' <<< $output
    ! grep 'add-key' <<< $output
}

@test "Get-config command works" {
    run -0 run_server get-config
    grep -e '^--prefix=asdf$' <<< $output
}

@test "Multi-word commands work when user not specified" {
    run -0 $WV_BASE_DIR/../server/novaboot-shell -c "help xxx"
    grep 'Target commands:' <<< $output
}

@test "Console prints a 'connected' message" {
    coproc exec_server console
    sed -e '/novaboot-shell: Connected/q0' -e '3q1' <&${COPROC[0]}
    kill $COPROC_PID; wait
}

@test "Without any argument console_cmd is executed if no default_cmd is configured" {
    coproc exec_server
    sed -e '/Hello console/q0' -e '3q1' <&${COPROC[0]}
    kill $COPROC_PID; wait
}

@test "Without any argument default_cmd is executed if configured" {
    (
        export NOVABOOT_SHELL_CONFIG="./.novaboot-shell"
        cat <<EOF > $NOVABOOT_SHELL_CONFIG
default_cmd='echo "Hello default"'
console_cmd='echo "Hello console"'
EOF
        run_server | grep -F 'Hello default'
        run_server console | grep -F 'Hello console'
    )
}

@test "default_cmd can be set to run_novaboot" {
    (
        export NOVABOOT_SHELL_CONFIG="./.novaboot-shell"
        cat <<EOF > default_nb_script
run echo "Hello default_nb_script"
EOF
        cat <<'EOF' > $NOVABOOT_SHELL_CONFIG
default_cmd='run_novaboot default_nb_script --scriptmod=s/default_nb_script/default_nb_script_mod/'
console_cmd='while sleep 0.01; do echo "Hello console"; done'
reset_cmd='echo "Hello reset"'
target_config="\
--name=some name with spaces and hash #
--exiton=Hello console
"
EOF
        run_server | (
            stdout=$(cat)
            grep -F 'Hello default_nb_script' <<<"$stdout"
            grep -F 'Hello default_nb_script_mod' <<<"$stdout"
            grep -F 'Hello console' <<<"$stdout"
        )
    )
}

@test "Second connection to console prints queue" {
    coproc console1 { exec_server console; }
    sed -e '/novaboot-shell: Connected/q0' -e '3q1' <&${console1[0]}
    coproc console2 { exec_server console; }
    sed -e '/Target is occupied by:/q0' <&${console2[0]}
    kill $console1_PID $console2_PID; wait
}

@test "Printed queue contains correct username" {
    coproc console1 { username=my_cool_username exec_server console; }
    sed -e '/novaboot-shell: Connected/q0' -e '3q1' <&${console1[0]}
    coproc console2 { username=another_username exec_server console; }
    sed -e '/my_cool_username/q0' -e '3q1' <&${console2[0]}
    kill $console1_PID $console2_PID; wait
}

@test "Admin sees help for admin subcommands" {
    admin=1 run run_server help
    grep 'add-key' <<< "$output"
}

@test "Only admin can run shell" {
    ! run_server shell
    admin=1 run_server shell < /dev/null
}

@test "Cannot reset when somebody else is connected to console" {
    coproc console1 { exec_server console; }
    sed -e '/novaboot-shell: Connected/q0' -e '3q1' <&${console1[0]}
    coproc console2 { run_server reset; }
    sed -e '/Target is occupied by:/q0' <&${console2[0]}
    test ! -e reset_done
    kill $console1_PID $console2_PID; wait
}

@test "Can reset when I'm connected to console" {
    coproc exec_server console
    sed -e '/novaboot-shell: Connected/q0' <&${COPROC[0]}
    run_server reset
    test -e reset_done
    kill $COPROC_PID
}

@test "Quoting of config variables" {
    export NOVABOOT_SHELL_CONFIG="./.novaboot-shell"

    tee "$NOVABOOT_SHELL_CONFIG" <<<'reset_cmd="touch file1 file2"'
    run_server reset
    test -e file1 -a -e file2

    tee "$NOVABOOT_SHELL_CONFIG" <<<'reset_cmd="touch \"file1 file2\""'
    run_server reset
    test -e "file1 file2"

    tee "$NOVABOOT_SHELL_CONFIG" <<<'reset_cmd="touch \"file1   file2\""'
    run_server reset
    test -e "file1   file2"

    tee "$NOVABOOT_SHELL_CONFIG" <<<'reset_cmd="touch \"\\\"file1 file2\\\"\""'
    run_server reset
    test -e '"file1 file2"'
}

@test "Config variables can depend on user name" {
    export NOVABOOT_SHELL_CONFIG="./.novaboot-shell"

    tee "$NOVABOOT_SHELL_CONFIG" <<<'console_cmd="echo Hello $NB_USER"'
    username=asdf run_server console | tee /dev/stderr | grep -F "Hello asdf"
    username=qwer run_server console | tee /dev/stderr | grep -F "Hello qwer"
}

@test "Missing console_cmd results in failure" {
      ! NOVABOOT_SHELL_CONFIG="/dev/null" run_server console
}
@test "console_cmd may contain a shell function name" {
    export NOVABOOT_SHELL_CONFIG="./.novaboot-shell"
    tee "$NOVABOOT_SHELL_CONFIG" <<<'console_cmd () { echo Hello user; }
console_cmd=console_cmd'
    run_server console | tee /dev/stderr | grep -F "Hello user"
}

@test "reset_cmd may contain a shell function name" {
    export NOVABOOT_SHELL_CONFIG="./.novaboot-shell"
    tee "$NOVABOOT_SHELL_CONFIG" <<<'reset_cmd () { echo Hello user; }
reset_cmd=reset_cmd'
    run_server reset | tee /dev/stderr | grep -F "Hello user"
}

# Hi-lock: (("^.*\\(?:WVSTART\\).*$" (0 (quote hi-black-b) t)))
